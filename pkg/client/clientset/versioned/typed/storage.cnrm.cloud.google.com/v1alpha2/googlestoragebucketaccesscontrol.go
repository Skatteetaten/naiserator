// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	"time"

	v1alpha2 "github.com/nais/naiserator/pkg/apis/storage.cnrm.cloud.google.com/v1alpha2"
	scheme "github.com/nais/naiserator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// GoogleStorageBucketAccessControlsGetter has a method to return a GoogleStorageBucketAccessControlInterface.
// A group's client should implement this interface.
type GoogleStorageBucketAccessControlsGetter interface {
	GoogleStorageBucketAccessControls(namespace string) GoogleStorageBucketAccessControlInterface
}

// GoogleStorageBucketAccessControlInterface has methods to work with GoogleStorageBucketAccessControl resources.
type GoogleStorageBucketAccessControlInterface interface {
	Create(*v1alpha2.GoogleStorageBucketAccessControl) (*v1alpha2.GoogleStorageBucketAccessControl, error)
	Update(*v1alpha2.GoogleStorageBucketAccessControl) (*v1alpha2.GoogleStorageBucketAccessControl, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha2.GoogleStorageBucketAccessControl, error)
	List(opts v1.ListOptions) (*v1alpha2.GoogleStorageBucketAccessControlList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.GoogleStorageBucketAccessControl, err error)
	GoogleStorageBucketAccessControlExpansion
}

// googleStorageBucketAccessControls implements GoogleStorageBucketAccessControlInterface
type googleStorageBucketAccessControls struct {
	client rest.Interface
	ns     string
}

// newGoogleStorageBucketAccessControls returns a GoogleStorageBucketAccessControls
func newGoogleStorageBucketAccessControls(c *StorageV1alpha2Client, namespace string) *googleStorageBucketAccessControls {
	return &googleStorageBucketAccessControls{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the googleStorageBucketAccessControl, and returns the corresponding googleStorageBucketAccessControl object, and an error if there is any.
func (c *googleStorageBucketAccessControls) Get(name string, options v1.GetOptions) (result *v1alpha2.GoogleStorageBucketAccessControl, err error) {
	result = &v1alpha2.GoogleStorageBucketAccessControl{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of GoogleStorageBucketAccessControls that match those selectors.
func (c *googleStorageBucketAccessControls) List(opts v1.ListOptions) (result *v1alpha2.GoogleStorageBucketAccessControlList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha2.GoogleStorageBucketAccessControlList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested googleStorageBucketAccessControls.
func (c *googleStorageBucketAccessControls) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a googleStorageBucketAccessControl and creates it.  Returns the server's representation of the googleStorageBucketAccessControl, and an error, if there is any.
func (c *googleStorageBucketAccessControls) Create(googleStorageBucketAccessControl *v1alpha2.GoogleStorageBucketAccessControl) (result *v1alpha2.GoogleStorageBucketAccessControl, err error) {
	result = &v1alpha2.GoogleStorageBucketAccessControl{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		Body(googleStorageBucketAccessControl).
		Do().
		Into(result)
	return
}

// Update takes the representation of a googleStorageBucketAccessControl and updates it. Returns the server's representation of the googleStorageBucketAccessControl, and an error, if there is any.
func (c *googleStorageBucketAccessControls) Update(googleStorageBucketAccessControl *v1alpha2.GoogleStorageBucketAccessControl) (result *v1alpha2.GoogleStorageBucketAccessControl, err error) {
	result = &v1alpha2.GoogleStorageBucketAccessControl{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		Name(googleStorageBucketAccessControl.Name).
		Body(googleStorageBucketAccessControl).
		Do().
		Into(result)
	return
}

// Delete takes name of the googleStorageBucketAccessControl and deletes it. Returns an error if one occurs.
func (c *googleStorageBucketAccessControls) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *googleStorageBucketAccessControls) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched googleStorageBucketAccessControl.
func (c *googleStorageBucketAccessControls) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.GoogleStorageBucketAccessControl, err error) {
	result = &v1alpha2.GoogleStorageBucketAccessControl{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("googlestoragebucketaccesscontrols").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
