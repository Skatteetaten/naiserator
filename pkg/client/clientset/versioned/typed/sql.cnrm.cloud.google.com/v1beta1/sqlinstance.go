// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"time"

	v1beta1 "github.com/nais/naiserator/pkg/apis/sql.cnrm.cloud.google.com/v1beta1"
	scheme "github.com/nais/naiserator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// SQLInstancesGetter has a method to return a SQLInstanceInterface.
// A group's client should implement this interface.
type SQLInstancesGetter interface {
	SQLInstances(namespace string) SQLInstanceInterface
}

// SQLInstanceInterface has methods to work with SQLInstance resources.
type SQLInstanceInterface interface {
	Create(*v1beta1.SQLInstance) (*v1beta1.SQLInstance, error)
	Update(*v1beta1.SQLInstance) (*v1beta1.SQLInstance, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.SQLInstance, error)
	List(opts v1.ListOptions) (*v1beta1.SQLInstanceList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.SQLInstance, err error)
	SQLInstanceExpansion
}

// sQLInstances implements SQLInstanceInterface
type sQLInstances struct {
	client rest.Interface
	ns     string
}

// newSQLInstances returns a SQLInstances
func newSQLInstances(c *SqlV1beta1Client, namespace string) *sQLInstances {
	return &sQLInstances{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the sQLInstance, and returns the corresponding sQLInstance object, and an error if there is any.
func (c *sQLInstances) Get(name string, options v1.GetOptions) (result *v1beta1.SQLInstance, err error) {
	result = &v1beta1.SQLInstance{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("sqlinstances").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SQLInstances that match those selectors.
func (c *sQLInstances) List(opts v1.ListOptions) (result *v1beta1.SQLInstanceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.SQLInstanceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("sqlinstances").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested sQLInstances.
func (c *sQLInstances) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("sqlinstances").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a sQLInstance and creates it.  Returns the server's representation of the sQLInstance, and an error, if there is any.
func (c *sQLInstances) Create(sQLInstance *v1beta1.SQLInstance) (result *v1beta1.SQLInstance, err error) {
	result = &v1beta1.SQLInstance{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("sqlinstances").
		Body(sQLInstance).
		Do().
		Into(result)
	return
}

// Update takes the representation of a sQLInstance and updates it. Returns the server's representation of the sQLInstance, and an error, if there is any.
func (c *sQLInstances) Update(sQLInstance *v1beta1.SQLInstance) (result *v1beta1.SQLInstance, err error) {
	result = &v1beta1.SQLInstance{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("sqlinstances").
		Name(sQLInstance.Name).
		Body(sQLInstance).
		Do().
		Into(result)
	return
}

// Delete takes name of the sQLInstance and deletes it. Returns an error if one occurs.
func (c *sQLInstances) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("sqlinstances").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *sQLInstances) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("sqlinstances").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched sQLInstance.
func (c *sQLInstances) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.SQLInstance, err error) {
	result = &v1beta1.SQLInstance{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("sqlinstances").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
