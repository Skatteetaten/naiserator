// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/nais/naiserator/pkg/apis/sql.cnrm.cloud.google.com/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SQLDatabaseLister helps list SQLDatabases.
type SQLDatabaseLister interface {
	// List lists all SQLDatabases in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.SQLDatabase, err error)
	// SQLDatabases returns an object that can list and get SQLDatabases.
	SQLDatabases(namespace string) SQLDatabaseNamespaceLister
	SQLDatabaseListerExpansion
}

// sQLDatabaseLister implements the SQLDatabaseLister interface.
type sQLDatabaseLister struct {
	indexer cache.Indexer
}

// NewSQLDatabaseLister returns a new SQLDatabaseLister.
func NewSQLDatabaseLister(indexer cache.Indexer) SQLDatabaseLister {
	return &sQLDatabaseLister{indexer: indexer}
}

// List lists all SQLDatabases in the indexer.
func (s *sQLDatabaseLister) List(selector labels.Selector) (ret []*v1beta1.SQLDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SQLDatabase))
	})
	return ret, err
}

// SQLDatabases returns an object that can list and get SQLDatabases.
func (s *sQLDatabaseLister) SQLDatabases(namespace string) SQLDatabaseNamespaceLister {
	return sQLDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SQLDatabaseNamespaceLister helps list and get SQLDatabases.
type SQLDatabaseNamespaceLister interface {
	// List lists all SQLDatabases in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.SQLDatabase, err error)
	// Get retrieves the SQLDatabase from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.SQLDatabase, error)
	SQLDatabaseNamespaceListerExpansion
}

// sQLDatabaseNamespaceLister implements the SQLDatabaseNamespaceLister
// interface.
type sQLDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SQLDatabases in the indexer for a given namespace.
func (s sQLDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SQLDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SQLDatabase))
	})
	return ret, err
}

// Get retrieves the SQLDatabase from the indexer for a given namespace and name.
func (s sQLDatabaseNamespaceLister) Get(name string) (*v1beta1.SQLDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("sqldatabase"), name)
	}
	return obj.(*v1beta1.SQLDatabase), nil
}
