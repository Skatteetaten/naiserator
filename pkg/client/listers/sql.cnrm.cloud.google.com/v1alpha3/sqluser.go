// Code generated by lister-gen. DO NOT EDIT.

package v1alpha3

import (
	v1alpha3 "github.com/nais/naiserator/pkg/apis/sql.cnrm.cloud.google.com/v1alpha3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlUserLister helps list SqlUsers.
type SqlUserLister interface {
	// List lists all SqlUsers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha3.SqlUser, err error)
	// SqlUsers returns an object that can list and get SqlUsers.
	SqlUsers(namespace string) SqlUserNamespaceLister
	SqlUserListerExpansion
}

// sqlUserLister implements the SqlUserLister interface.
type sqlUserLister struct {
	indexer cache.Indexer
}

// NewSqlUserLister returns a new SqlUserLister.
func NewSqlUserLister(indexer cache.Indexer) SqlUserLister {
	return &sqlUserLister{indexer: indexer}
}

// List lists all SqlUsers in the indexer.
func (s *sqlUserLister) List(selector labels.Selector) (ret []*v1alpha3.SqlUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.SqlUser))
	})
	return ret, err
}

// SqlUsers returns an object that can list and get SqlUsers.
func (s *sqlUserLister) SqlUsers(namespace string) SqlUserNamespaceLister {
	return sqlUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlUserNamespaceLister helps list and get SqlUsers.
type SqlUserNamespaceLister interface {
	// List lists all SqlUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha3.SqlUser, err error)
	// Get retrieves the SqlUser from the indexer for a given namespace and name.
	Get(name string) (*v1alpha3.SqlUser, error)
	SqlUserNamespaceListerExpansion
}

// sqlUserNamespaceLister implements the SqlUserNamespaceLister
// interface.
type sqlUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlUsers in the indexer for a given namespace.
func (s sqlUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha3.SqlUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.SqlUser))
	})
	return ret, err
}

// Get retrieves the SqlUser from the indexer for a given namespace and name.
func (s sqlUserNamespaceLister) Get(name string) (*v1alpha3.SqlUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha3.Resource("sqluser"), name)
	}
	return obj.(*v1alpha3.SqlUser), nil
}
