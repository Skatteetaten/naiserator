// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nais/naiserator/pkg/apis/nais.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JwkerLister helps list Jwkers.
type JwkerLister interface {
	// List lists all Jwkers in the indexer.
	List(selector labels.Selector) (ret []*v1.Jwker, err error)
	// Jwkers returns an object that can list and get Jwkers.
	Jwkers(namespace string) JwkerNamespaceLister
	JwkerListerExpansion
}

// jwkerLister implements the JwkerLister interface.
type jwkerLister struct {
	indexer cache.Indexer
}

// NewJwkerLister returns a new JwkerLister.
func NewJwkerLister(indexer cache.Indexer) JwkerLister {
	return &jwkerLister{indexer: indexer}
}

// List lists all Jwkers in the indexer.
func (s *jwkerLister) List(selector labels.Selector) (ret []*v1.Jwker, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Jwker))
	})
	return ret, err
}

// Jwkers returns an object that can list and get Jwkers.
func (s *jwkerLister) Jwkers(namespace string) JwkerNamespaceLister {
	return jwkerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JwkerNamespaceLister helps list and get Jwkers.
type JwkerNamespaceLister interface {
	// List lists all Jwkers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Jwker, err error)
	// Get retrieves the Jwker from the indexer for a given namespace and name.
	Get(name string) (*v1.Jwker, error)
	JwkerNamespaceListerExpansion
}

// jwkerNamespaceLister implements the JwkerNamespaceLister
// interface.
type jwkerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Jwkers in the indexer for a given namespace.
func (s jwkerNamespaceLister) List(selector labels.Selector) (ret []*v1.Jwker, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Jwker))
	})
	return ret, err
}

// Get retrieves the Jwker from the indexer for a given namespace and name.
func (s jwkerNamespaceLister) Get(name string) (*v1.Jwker, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("jwker"), name)
	}
	return obj.(*v1.Jwker), nil
}
